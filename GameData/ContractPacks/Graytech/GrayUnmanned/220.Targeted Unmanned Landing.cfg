// Credit to linuxgurugamer for his Unmanned and Grand Tour Contracts, which this is strongly based off.
// 
// License is CC BY-NC-SA 4.0
// https://creativecommons.org/licenses/by-nc-sa/4.0/

CONTRACT_TYPE
{
	name = Gray Targeted Unmanned Landing
	group = GrayTechUnmannedMissions
	genericTitle = Land a probe at a specified target
	title = Land a probe on the @/targetBody.Name() at a specified target

	topic = landing
	subject = Srf_@GrayTech:unmannedTarget

	notes = Complete the following:
	synopsis = Launch an unmanned probe and have it land on the @/targetBody.Name() at a specified target
	completedMessage = You did it! You haved landed on the @/targetBody.Name() at a specific target. Future generations will remember this day.
	minExpiry = 50.0
	maxExpiry = 100.0
	// contract deadline in days.  Default is no deadline.
	deadline = @GrayTech:unmannedTargetTravelTime * @GrayTech:deadlineHalfOrbits
	cancellable = true
	declinable = true
	prestige = Significant
	maxSimultaneous = 2
	rewardScience = 5.0
	rewardReputation = 25.0
	rewardFunds = @advanceFunds * 2.0
	advanceFunds = Round((@GrayTech:rewardBucks + @GrayTech:unmannedLandingBonus) * (1.25 + Random(-0.5, 0.5)), 1000.0)
	sortKey = 220
	
	targetBody = @GrayTech:unmannedTarget
	
	DATA
	{
		type = string

		hidden = true
		uniquenessCheck = GROUP_ALL
		requiredValue = true

		title = Must of not have previously not completed targeted landing mission for this body
		uid = TargetedUnmannedLanding:@GrayTech:unmannedTarget.Name()
	}

	
	REQUIREMENT
	{
		name = ReachSpace
		type = ReachSpace
	}

	REQUIREMENT
	{
		name = HasSurface
		type = Expression
		
		title = Target body must have a surface
		expression = @/targetBody.HasSurface() && !@GrayTech:allGasPlanets.Contains(@/targetBody)
	}
			
	// Make sure they did a flyby first
	REQUIREMENT
	{
		name = FlyBy
		type = FlyBy
	}

	PARAMETER
	{
		name = VPG
		type = VesselParameterGroup

		PARAMETER
		{
			name = HasCrew
			type = HasCrew
			maxCrew = 0
			minCrew = 0
		}	

		PARAMETER
		{
			name = VisitWaypoint
			type = VisitWaypoint
			index = 0
			distance = 5000
		}

		PARAMETER
		{
			name = ReachState
			type = ReachState
			situation = LANDED
			completeInSequence = true
			disableOnStateChange = true
		}		
	}
	BEHAVIOUR
	{
		name = WaypointGenerator
		type = WaypointGenerator
		
		RANDOM_WAYPOINT
		{
			name = Impact Target
	
			count = 1
			icon = thermometer
			altitude = 0.0
		}
	
	}
}
