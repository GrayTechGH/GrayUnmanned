// Credit to linuxgurugamer for his Unmanned and Grand Tour Contracts, which this is strongly based off.
// 
// License is CC BY-NC-SA 4.0
// https://creativecommons.org/licenses/by-nc-sa/4.0/

CONTRACT_TYPE
{
//	trace = true
 	name = GrayTech Stationary Targeted Orbital Satellite
 	group = GrayTechUnmannedMissions
 	genericTitle = Put a probe in a Stationary orbit orbit around another body above a targeted point
 	title = Orbit the first satellite in a Stationary orbit around @/targetBody.Name() above a targeted point .
 	
 	topic = satellites
 	subject = @/targetBody.Name()
 	
 	notes = Complete the following:
 	synopsis = Put a satellite in Stationary orbit around @/targetBody.Name() above a targeted point . Use the Orbital waypoint as a guide .
 	completedMessage = You did it! We've placed a satellite in a Stationary orbit around @/targetBody.Name() above a targeted point !  This will be a day long remembered.
 	cancellable = true
 	declinable = true
 	prestige = Significant
 	deadline = @GrayTech:synchronousTargetTravelTime * @GrayTech:deadlineHalfOrbits
 	maxSimultaneous = 1
 	rewardScience = 5.0
 	rewardReputation = 15.0
	rewardFunds = @advanceFunds * 2.0
	advanceFunds = Round(@GrayTech:rewardBucks * (1.4 + Random(-0.5, 0.5)), 1000.0)
	sortKey = 207

 	targetBody = 	@GrayTech:synchronousTarget
// 	targetBody = 	Minmus
 

 	REQUIREMENT
 	{
 		name = ReachSpace
 		type = ReachSpace
 	}
 
 	// Make sure they did a flyby first
 	REQUIREMENT
	{
 		name = ValidTarget
 		type =  Expression
		title = Valid taget must be available
		
		expression = @/targetBody != @GrayTech:homeSun && @/targetBody.CanHaveSynchronousOrbit(0.05)
 	}
  
  	// Make sure they did a flyby first
 	REQUIREMENT
	{
 		name = FlyBy
 		type = FlyBy
 	}
 	
 	DATA
 	{
 		type = double

 		hidden = true
 		requiredValue = true
 	// Height (based on Sea level) =(POWER((G*M*POWER(T,2))/(4*POWER(PI,2)),(1/3))-RADIUS)
 		targetAlt = Pow((0.00000000006674 * @/targetBody.Mass() * Pow(@/targetBody.RotationalPeriod(), 2.0))/(4.0 * Pow(3.14, 2.0)), (1.0 / 3.0)) - @/targetBody.Radius()
 		targetLatitude = Random(-180, 180)
 
 		tMass = @/targetBody.Mass()
 		tPeriod = @/targetBody.RotationalPeriod()
 		tRadius = @/targetBody.Radius()
	}

// either the stationary or trageted contract but not both
	DATA
 	{
 		type = string
 
 		hidden = false
 		uniquenessCheck = GROUP_ALL
 		requiredValue = true
 
		title = Must of not have previously not completed Stationary orbit mission for this body
 		uid = GrayTech Stationary Orbital Satellite: @/targetBody.Name()
 	}
 
 	PARAMETER
 	{
 		name = VPG
 		type = VesselParameterGroup
 		define = Satellite
 		PARAMETER
 		{
 			name = HasCrew
 			type = HasCrew
 			maxCrew = 0
 			minCrew = 0
 		}	
		PARAMETER
		{
 			name =  StationaryOrbit
 			type = ReachSpecificOrbit
 			index = 0
 			deviationWindow = @GrayTech:baseDeviation * 0.5
		}

		PARAMETER
		{
			name = Stationary_longitude
			type = VisitWaypoint
			index = 0
			horizontalDistance = @/targetAlt / 50.0
			showMessages = true
			title = Position the satellite radially inline with the waypoints
		}
	}
 	BEHAVIOUR
 	{
 		name = SynchronousOrbitGenerator
 		type = OrbitGenerator
 
		RANDOM_ORBIT
		{
 			type = STATIONARY
			// difficulty = 1
 			targetBody = @GrayTech:synchronousTarget.CanHaveSynchronousOrbit(0.05) ? @GrayTech:synchronousTarget : @GrayTech:synchronousBodies.ElementAt(0)
 		}
 	}
 	
 	BEHAVIOUR
 	{
 		name = SynchronousWaypoint
 		type = WaypointGenerator
 		WAYPOINT
    {
    	name = Orbit Waypoint
    	latitude = 0
    	longitude = @/targetLatitude
    	altitude = @/targetAlt
    	icon = balloon
    }
 		WAYPOINT
    {
    	name = Surface Waypoint
    	latitude = 0
    	longitude = @/targetLatitude
    	altitude = 0
    	icon = seismic
    }
 	}
 }
