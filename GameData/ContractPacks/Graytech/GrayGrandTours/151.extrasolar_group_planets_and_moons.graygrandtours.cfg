// Credit to linuxgurugamer for his Unmanned and Grand Tour Contracts, which this is strongly based off.
// 
// License is CC BY-NC-SA 4.0
// https://creativecommons.org/licenses/by-nc-sa/4.0/

CONTRACT_TYPE
{
	name = Gray Extrasolar Group Planets And Moons
	group = GrayGrandToursExtrasolarSystems
	title = Do a grand tour of all the planets and moons of @targetBody.Name()
	genericTitle = Do a grand tour of an extrasolar body's planets and moons 

	description = Our sponser would like to do a tour of all the Extrasolar planets and then return home

	notes = Complete the following:
	synopsis = Fly by all the planets
	completedMessage = You did it! You've successly flown by each planet
	cancellable = true
	declinable = true
	prestige = Significant
	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 20.0 + Round(1 + Random(1.0, 2.0) * @/missionMultiplier * 4.0, 1.0)
	rewardReputation = 30.0  + Round(1 + Random(2.0, 5.0) * @/missionMultiplier * 6.0, 1.0)
	rewardFunds = @/advanceFunds + Round(@GrayTech:rewardBucks * @/missionMultiplier * 5.0 * Random(0.8, 1.2), 1000.0)
	advanceFunds = Round(@GrayTech:rewardBucks * 5.0 + @missionMultiplier / 10.0 * Random(0.8, 1.2), 1000.0)
	sortKey = 151

	targetBody = @GrayTech:allExtraSuns.Random()

	DATA
	{
		type = double
		
		missionMultiplier = 4 + @/targetBody.Children().Count() * 1.5 + @GrayTech:localExtraMoons.Where(cb => cb.Parent().Parent() == @/targetBody).Count() 
	}
	DATA
	{
		type = List<CelestialBody>
		hidden = true
		requiredValue = false
		
		targetPlanets = @/targetBody.Children().Where(cb => @GrayTech:allExtraPlanets.Contains(cb))
		targetMoons = @GrayTech:localExtraMoons.Where(cb => cb.Parent().Parent() == @/targetBody)
	}
		
	REQUIREMENT
	{
		name = OneSun
		type = Expression
		expression = @GrayTech:allExtraSuns.Count() > 0
		title = Must have at least 1 extrasolar sun
	}
	REQUIREMENT
	{
		name = SunPlanets
		type = Expression
		expression = @/targetMoons.Count() > 0
		title = Sun must have at least one moon
	}

	REQUIREMENT
	{
		name = ReachSpace
		type = ReachSpace
	}
	
	PARAMETER
	{
		name = HasCrew
		type = HasCrew
		minCrew = 1
	}
	PARAMETER
	{
		type = VesselParameterGroup
		PARAMETER
		{
			name = All
			type = All
			title = Do these things

			PARAMETER
			{
				//name = Ready to launch
				//type = ReachState
				//targetBody = Kerbin
				//situation = PRELAUNCH

				name = Flying
				type = ReachState
				targetBody = Kerbin
				situation = FLYING

			}
			PARAMETER
			{
				type = ReachState
				disableOnStateChange = true
				targetBody = @/targetBody
			}
//////////

			PARAMETER
			{
				type = ReachState
				disableOnStateChange = true
				
				ITERATOR
   			{
   				type = CelestialBody
   	 			targetBody = @/targetPlanets
   			}
 			}
			PARAMETER
			{
				type = ReachState
				disableOnStateChange = true
				
				ITERATOR
   			{
   				type = CelestialBody
   	 			targetBody = @/targetMoons
   			}
 			}
	
//////////
		}
		PARAMETER
		{
			name = ReturnHome
			type = ReturnHome

			completeInSequence = true
		// Text for the contract parameter.
		// Default = Return home.
		//title =
		}
	}
}

