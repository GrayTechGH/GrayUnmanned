// Credit to linuxgurugamer for his Unmanned and Grand Tour Contracts, which this is strongly based off.
// 
// License is CC BY-NC-SA 4.0
// https://creativecommons.org/licenses/by-nc-sa/4.0/

CONTRACT_TYPE
{
	name = Gray Extrasolar All Planets Land
	group = GrayGrandToursExtrasolarSystems
	title = Do a grand tour of all the Extrasolar planets

	description = Our sponser would like to do a tour of all the Extrasolar planets and then return home

	notes = Complete the following:
	synopsis = Fly by all the planets
	completedMessage = You did it! You've successly flown by each planet
	cancellable = true
	declinable = true
	prestige = Significant
	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 20.0 + Round(1 + Random(1.0, 2.0) * @/missionMultiplier * 4.0, 1.0)
	rewardReputation = 30.0  + Round(1 + Random(2.0, 5.0) * @/missionMultiplier * 6.0, 1.0)
	rewardFunds = @/advanceFunds + Round(@GrayTech:rewardBucks * @/missionMultiplier * 5.0 * Random(0.8, 1.2), 1000.0)
	advanceFunds = Round(@GrayTech:rewardBucks * 5.0 + @missionMultiplier / 10.0 * Random(0.8, 1.2), 1000.0)

	sortKey = 165

	DATA
	{
		type = double
		
		missionMultiplier = @GrayTech:localExtraPlanets.Count() * 2.5 
	}
	DATA
	{
		type = List<CelestialBody>
		hidden = true
		requiredValue = false
		
		landablePlanets =  @GrayTech:allExtraPlanets.Where(cb => cb.HasSurface() && !@GrayTech:allGasPlanets.Contains(cb))
		unlandablePlanets =  @GrayTech:allExtraPlanets.ExcludeAll(@/landablePlanets)
	}	
	REQUIREMENT
	{
		name = TwoSuns
		type = Expression
//	May be necessary at a future date.  Remove to group
//	expression = @GrayTech:localExtraSuns.Where(cb => cb.Children().Where(cb2 => @GrayTech:localExtraPlanets.Contains(cb2)).Count() > 0).Count() > 1
		expression = @GrayTech:allExtraSuns.Where(cb => cb.Children().Count() > 2).Count() > 1
		title = Must have at least two extrasolar suns with planets
	}
	REQUIREMENT
	{
		name = NumLandablePlanets
		type = Expression
		expression = @/landablePlanets.Count() > 0
		title = Grand tour must have at least one planet you can land on
	}
	REQUIREMENT
	{
		name = ReachSpace
		type = ReachSpace
	}
	
	PARAMETER
	{
		name = HasCrew
		type = HasCrew
		minCrew = 1
	}
	PARAMETER
	{
		type = VesselParameterGroup
		PARAMETER
		{
			name = All
			type = All
			title = Do these things

			PARAMETER
			{
				//name = Ready to launch
				//type = ReachState
				//targetBody = Kerbin
				//situation = PRELAUNCH

				name = Flying
				type = ReachState
				targetBody = Kerbin
				situation = FLYING

			}
//////////
			PARAMETER
			{
				name = All
				type = All
				title = Flyby and land on:@/targetBody.Name()

				PARAMETER
				{
					type = ReachState
					disableOnStateChange = true
					targetBody = @../targetBody
				}
				PARAMETER
				{
					type = ReachState
					targetBody = @../targetBody
					situation = LANDED
					disableOnStateChange = true
				}
				
				ITERATOR
   			{
     			type = CelestialBody
   	  		targetBody = @/landablePlanets
    		}
 			}
			PARAMETER
			{
				type = ReachState
				disableOnStateChange = true
				title = Flyby:@/targetBody.Name()
	
				ITERATOR
   			{
     			type = CelestialBody
   	  		targetBody = @/unlandablePlanets
    		}
 			}

//////////
		}
		PARAMETER
		{
			name = ReturnHome
			type = ReturnHome

			completeInSequence = true
		// Text for the contract parameter.
		// Default = Return home.
		//title =
		}
	}
}

