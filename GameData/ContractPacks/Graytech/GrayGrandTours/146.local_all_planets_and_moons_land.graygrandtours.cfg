// Credit to linuxgurugamer for his Unmanned and Grand Tour Contracts, which this is strongly based off.
// 
// License is CC BY-NC-SA 4.0
// https://creativecommons.org/licenses/by-nc-sa/4.0/

CONTRACT_TYPE
{
	name = Gray Local All Planets And Moons Land
	group = GrayGrandToursLocalSystem
	title = Do a grand tour of all the local planets and moons

	description = Our sponser would like to do a tour of all the local planets and moons and then return home

	notes = Complete the following:
	synopsis = Fly by all the local planets and moons
	completedMessage = You did it! You've successly flown by each planet
	cancellable = true
	declinable = true
	prestige = Significant
	maxCompletions = 1
	maxSimultaneous = 1
	rewardScience = 20.0 + Round(1 + Random(1.0, 2.0) * @/missionMultiplier * 4.0, 1.0)
	rewardReputation = 30.0  + Round(1 + Random(2.0, 5.0) * @/missionMultiplier * 6.0, 1.0)
	rewardFunds = @/advanceFunds + Round(@GrayTech:rewardBucks * @/missionMultiplier * 5.0 * Random(0.8, 1.2), 1000.0)
	advanceFunds = Round(@GrayTech:rewardBucks * 5.0 + @missionMultiplier / 10.0 * Random(0.8, 1.2), 1000.0)
	sortKey = 146

	DATA
	{
		type = double
		
		missionMultiplier = @GrayTech:localPlanets.Count() * 2.75 + @GrayTech:localMoons.Count() * 2
	}
	DATA
	{
		type = List<CelestialBody>
		hidden = true
		requiredValue = false
		
		landablePlanets = @GrayTech:localPlanets.Where(cb => cb.HasSurface())
		unlandablePlanets = @GrayTech:localPlanets.ExcludeAll(@/landablePlanets)
		landableMoons = @GrayTech:localMoons.Where(cb => cb.HasSurface())
		unlandableMoons = @GrayTech:localMoons.ExcludeAll(@/landableMoons)
	}

	REQUIREMENT
	{
		name = ReachSpace
		type = ReachSpace
	}
	REQUIREMENT
	{
		name = NumPlanets
		type = Expression
		expression = @GrayTech:outerPlanets.Count() > 1 && @GrayTech:innerPlanets.Count() > 1
		title = Grand tour must include at least one inner and one outer planet
	}
	REQUIREMENT
	{
		name = NumLandable
		type = Expression
		expression = (@/landableMoons.Count() + @/landablePlanets.Count())> 1
		title = Grand tour must include at least two bodies you can land on
	}
	REQUIREMENT
	{
		name = NumLandableMoons
		type = Expression
		expression = @/landableMoons.Count() > 0
		title = Grand tour must include at least one moon you can land on
	}
	
	PARAMETER
	{
		name = HasCrew
		type = HasCrew
		minCrew = 1
	}
	PARAMETER
	{
		type = VesselParameterGroup
		PARAMETER
		{
			name = All
			type = All
			title = Do these things

			PARAMETER
			{
				//name = Ready to launch
				//type = ReachState
				//targetBody = Kerbin
				//situation = PRELAUNCH

				name = Flying
				type = ReachState
				targetBody = Kerbin
				situation = FLYING

			}	
//////////
			PARAMETER
			{
				name = All
				type = All
				title = Flyby and land on planet:@/targetBody.Name()

				PARAMETER
				{
					type = ReachState
					disableOnStateChange = true
					targetBody = @../targetBody
				}
				PARAMETER
				{
					type = ReachState
					targetBody = @../targetBody
					situation = LANDED
					disableOnStateChange = true
				}
				
				ITERATOR
   			{
     			type = CelestialBody
   	  		targetBody = @/landablePlanets
    		}
 			}
			PARAMETER
			{
				type = ReachState
				disableOnStateChange = true
				title = Flyby planet:@/targetBody.Name()
	
				ITERATOR
   			{
     			type = CelestialBody
   	  		targetBody = @/unlandablePlanets
    		}
 			}
			PARAMETER
			{
				name = All
				type = All
				title = Flyby and land on moon:@/targetBody.Name()

				PARAMETER
				{
					type = ReachState
					disableOnStateChange = true
					targetBody = @../targetBody
				}
				PARAMETER
				{
					type = ReachState
					targetBody = @../targetBody
					situation = LANDED
					disableOnStateChange = true
				}
				
				ITERATOR
   			{
     			type = CelestialBody
   	  		targetBody = @/landableMoons
    		}
 			}
			PARAMETER
			{
				type = ReachState
				disableOnStateChange = true
				title = Flyby moon:@/targetBody.Name()
	
				ITERATOR
   			{
     			type = CelestialBody
   	  		targetBody = @/unlandableMoons
    		}
 			}	

//////////
		}
		PARAMETER
		{
			name = ReturnHome
			type = ReturnHome

			completeInSequence = true
		// Text for the contract parameter.
		// Default = Return home.
		//title =
		}
	}
}

